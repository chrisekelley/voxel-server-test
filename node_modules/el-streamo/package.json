{
  "name": "el-streamo",
  "version": "1.0.0",
  "homepage": "https://github.com/dominictarr/el-streamo",
  "repository": {
    "type": "git",
    "url": "git://github.com/dominictarr/el-streamo.git"
  },
  "dependencies": {
    "through": "~1.1.1"
  },
  "devDependencies": {},
  "scripts": {
    "test": "testling --debug --browser=chrome test/index.js & sleep 1; google-chrome localhost:54046"
  },
  "author": {
    "name": "'Dominic Tarr'",
    "email": "dominic.tarr@gmail.com",
    "url": "http://dominictarr.com"
  },
  "license": "MIT",
  "readme": "# el-streamo\n\nCrazy streams of (html) elements! Stream through a template into a list.\n\nlike [sorta](https://github.com/substack/sorta) but different.\n\n<img src=https://secure.travis-ci.org/'Dominic Tarr'/el-streamo.png?branch=master>\n\n## example\n\n``` js \nvar elstreamo = require('el-streamo')\nvar elstream =\nelstreamo.writable('#id', function (data) {\n  //return a HTML element. yeah, this function is a template\n  var el = document.createElement('pre')\n  el.innerText = JSON.stringify(data)\n  return el\n})\n```\n\nIf the `data` has an `id` property, this will be assigned to the elements,\nand you can do updates.\n\n``` js\nelstream.write({id: 264, value: 'hello'})\nelstream.write({id: 265, value: 'there'})\nelstream.write({id: 266, value: 'what'})\nelstream.write({id: 267, value: 'ever'})\n\n//this will update the template for the first message!\nelstream.write({id: 264, value: 'HELLO'})\n```\n## customization\n\n`elstreamo.writable` takes more options to enable deletes, and sorting.\n\n``` js\nestreamo.writable('#id', {\n  //return the id to be used for this element.\n  id: function (data) {\n    return data.id\n  },\n  //sort function. (see [sort](#sort))\n  sort: function (data1, data2) {\n    return data1.x - data2.x\n  },\n  //return true if this element should be deleted\n  delete: function (data) {\n    return data._delete\n  },\n  //return an html element\n  template: function (data) {\n    var el = document.createElement('pre')\n    el.innerText = JSON.stringify(data)\n    return el\n  },\n  //if this returns true, clear all elements.\n  clear: function (data) {\n    return data === 'CLEAR'\n  }\n})\n```\n\nAbove is pretty much the defaults, read the code.\n\n## readable\n\nThere is also a readable stream for turning DOM events into streams.\n\n``` js\nelstreamo.readable(element, {\n  click: function (e) {\n    return 'click!'\n  }\n})\n//make a stream of changes in an input, or pressing enter.\nelstreamo.readable(input, {\n  keyup: function (e) {\n    if (e.keyCode == 13) //enter\n      this.queue(input.value)\n  },\n  change: function (e) {\n    this.queue(input.value)\n  },\n  blur: function () {\n    this.queue(input.value)\n  }\n})\n\n```\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "_id": "el-streamo@1.0.0",
  "description": "Crazy streams of (html) elements! Stream through a template into a list.",
  "_from": "el-streamo@1.0.0"
}
