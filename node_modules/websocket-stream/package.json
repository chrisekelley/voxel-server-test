{
  "name": "websocket-stream",
  "description": "websockets with the node stream api. works in browser and node",
  "keywords": [
    "websocket",
    "websockets",
    "stream",
    "streams",
    "realtime"
  ],
  "version": "0.0.5",
  "_npmUser": {
    "name": "maxogden",
    "email": "max@maxogden.com"
  },
  "dependencies": {},
  "devDependencies": {
    "ws": "0.4.22",
    "el-streamo": "1.0.0",
    "ecstatic": "0.1.7"
  },
  "optionalDependencies": {},
  "engines": {
    "node": ">=0.8"
  },
  "readme": "# websocket-stream\n\n    npm install websocket-stream\n\nuse HTML5 [websockets](https://developer.mozilla.org/en-US/docs/WebSockets) the node way -- with streams\n\n# in the browser\n\nyou can use [browserify](http://github.com/substack/node-browserify) to package this module for browser use. there is a also pre-made + minified version you can download and use right away called `websocket-stream-min.js`\n\n```javascript\nvar websocket = require('websocket-stream')\nvar ws = websocket('ws://realtimecats.com')\nws.pipe(somewhereAwesome)\n```\n\n`ws` is a stream and speaks stream events: `data`, `error` and `end`. that means you can pipe output to anything that accepts streams. you can also pipe data into streams (such as a webcam feed or audio data)\n\n# on the server\n\nusing the [`ws`](http://npmjs.org/ws) module you can make a websocket server and use this module to get websocket streams on the server:\n\n```javascript\nvar WebSocketServer = require('ws').Server\nvar websocket = require('websocket-stream')\nvar wss = new WebSocketServer({server: someHTTPServer})\nwss.on('connection', function(ws) {\n  var stream = websocket(ws)\n  fs.createReadStream('bigdata.json').pipe(stream)\n})\n```\n\n## extras\n\nyou can pass in a custom protocol to the constructor as the second argument\n\n`require('websocket-stream').WebsocketStream` is the raw constructor\n\nBSD LICENSE",
  "readmeFilename": "readme.md",
  "_id": "websocket-stream@0.0.5",
  "_from": "websocket-stream@0.0.5"
}
